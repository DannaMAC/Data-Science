# -*- coding: utf-8 -*-
"""ProyectoPrimerParcial.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lW7LOahjxlk54_Uym4xg4vsX5cRV1kVn
"""

import os
import tarfile
import urllib

DOWNLOAD_ROOT= "https://raw.githubusercontent.com/ageron/handson-ml2/master/"
HOUSING_PATH= os.path.join("datasets", "housing")
HOUSING_URL= DOWNLOAD_ROOT + "datasets/housing/housing.tgz"

def fetch_housing_data(housing_url=HOUSING_URL, housing_path=HOUSING_PATH):
    os.makedirs(housing_path, exist_ok=True)
    tgz_path= os.path.join(housing_path, "housing.tgz")
    urllib.request.urlretrieve(housing_url, tgz_path)
    housing_tgz= tarfile.open(tgz_path)
    housing_tgz.extractall(path=housing_path)
    housing_tgz.close()

fetch_housing_data(housing_path=HOUSING_PATH, housing_url=HOUSING_URL)

import pandas as pd

def load_housing_data(housing_path=HOUSING_PATH):
    csv_path= os.path.join(housing_path, "housing.csv")
    return pd.read_csv(csv_path)

print(load_housing_data())

import numpy as np

def split_train_test(data, test_ratio):
    shuffled_indices= np.random.permutation(len(data))
    test_set_size= int(len(data) * test_ratio)
    test_indices= shuffled_indices[:test_set_size]
    train_indices= shuffled_indices[test_set_size:]
    return data.iloc[train_indices], data.iloc[test_indices]


train_set, test_set = split_train_test(load_housing_data(), 0.2)

print(train_set, test_set)
len(train_set)
len(test_set)

from sklearn.model_selection import train_test_split

train_set, test_set= train_test_split(load_housing_data(), test_size=0.2, random_state=42)

print(train_set)
print(test_set)

import pandas as pd
import numpy as np

housing = load_housing_data()

housing["income_cat"] = pd.cut(housing["median_income"],
                                bins=[0., 1.5, 3.0, 4.5, 6., np.inf],
                                labels=[1, 2, 3, 4, 5])

housing["income_cat"].hist()

import pandas as pd
import numpy as np

housing = load_housing_data()
housing["income_cat"] = pd.cut(housing["median_income"],
                                bins=[0., 1.5, 3.0, 4.5, 6., np.inf],
                                labels=[1, 2, 3, 4, 5])

from sklearn.model_selection import StratifiedShuffleSplit

split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)
for train_index, test_index in split.split(housing, housing["income_cat"]):
    strat_train_set = housing.loc[train_index]
    strat_test_set = housing.loc[test_index]
print(strat_test_set["income_cat"].value_counts() / len(strat_test_set))

housing = strat_train_set.copy()

housing.plot(kind="scatter", x="longitude", y="latitude")

housing.plot(kind="scatter", x="longitude", y="latitude", alpha=0.1)

import matplotlib.pyplot as plt
housing.plot(kind="scatter", x="longitude", y="latitude", alpha=0.4,
             s=housing["population"]/100, label="population", figsize=(10,7),
             c="median_house_value", cmap=plt.get_cmap("jet"), colorbar=True,
             sharex=False)
plt.legend()

corr_matrix= housing.select_dtypes(include=['number']).corr()
corr_matrix["median_house_value"].sort_values(ascending=False)

from pandas.plotting import scatter_matrix

attributes= ["median_house_value", "median_income", "total_rooms",
             "housing_median_age"]
scatter_matrix(housing[attributes], figsize=(12, 8))

housing["rooms_per_household"]= housing["total_rooms"]/housing["households"]
housing["bedrooms_per_room"]= housing["total_bedrooms"]/housing["total_rooms"]
housing["population_per_household"]= housing["population"]/housing["households"]

corr_matrix= housing.select_dtypes(include=['number']).corr()
corr_matrix["median_house_value"].sort_values(ascending=False)

housing_cat=housing[["ocean_proximity"]]
housing_cat.head(10)

housing = strat_train_set.drop("median_house_value", axis=1)
housing_labels = strat_train_set["median_house_value"].copy()
print(housing)
print(housing_labels)

housing.dropna(subset=["total_bedrooms"])
housing.drop("total_bedrooms", axis=1)
median= housing["total_bedrooms"].median()
print(median)

from sklearn.impute import SimpleImputer
imputer= SimpleImputer(strategy="median")
housing_num= housing.drop("ocean_proximity", axis=1)
housing_num = housing_num.select_dtypes(include=np.number)
imputer.fit(housing_num)
imputer.statistics_
housing_num.median().values
x= imputer.transform(housing_num)
print(x)
housing_tr= pd.DataFrame(x, columns=housing_num.columns, index=housing_num.index)
print(housing_tr)

housing_cat= housing[["ocean_proximity"]]
housing_cat.head(10)
print(housing_cat.head(10))

from sklearn.preprocessing import OrdinalEncoder
ordinal_encoder= OrdinalEncoder()
housing_cat_encoded= ordinal_encoder.fit_transform(housing_cat)
housing_cat_encoded[:10]
print(housing_cat_encoded[:10])
ordinal_encoder.categories_

from sklearn.preprocessing import OneHotEncoder
cat_encoder= OneHotEncoder()
housing_cat_1hot= cat_encoder.fit_transform(housing_cat)
housing_cat_1hot
print(housing_cat_1hot)
housing_cat_1hot.toarray()

from sklearn.base import BaseEstimator, TransformerMixin
import numpy as np

rooms_ix, bedrooms_ix, population_ix, households_ix= 3, 4, 5, 6

class CombinedAttributesAdder(BaseEstimator, TransformerMixin):
    def __init__(self, add_bedrooms_per_room=True):
        self.add_bedrooms_per_room= add_bedrooms_per_room
    def fit(self, X, y=None):
        return self
    def transform(self, X):
        rooms_per_household= X[:, rooms_ix] / X[:, households_ix]
        population_per_household= X[:, population_ix] / X[:, households_ix]
        if self.add_bedrooms_per_room:
            bedrooms_per_room= X[:, bedrooms_ix] / X[:, rooms_ix]
            return np.c_[X, rooms_per_household, population_per_household, bedrooms_per_room]
        else:
            return np.c_[X, rooms_per_household, population_per_household]

attr_adder= CombinedAttributesAdder(add_bedrooms_per_room=False)
housing_extra_attribs= attr_adder.transform(housing.values)
print(housing_extra_attribs)

from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler

num_pipeline= Pipeline([
    ('imputer', SimpleImputer(strategy="median")),
    ('attribs_adder', CombinedAttributesAdder()),
    ('std_scaler', StandardScaler()),
])

housing_num_tr= num_pipeline.fit_transform(housing_num)
print(housing_num_tr)

from sklearn.compose import ColumnTransformer

num_attribs= list(housing_num)
cat_attribs= ["ocean_proximity"]

full_pipeline= ColumnTransformer([
    ("num", num_pipeline, num_attribs),
    ("cat", OneHotEncoder(), cat_attribs),
])

housing_prepared= full_pipeline.fit_transform(housing)
print(housing_prepared)

from sklearn.linear_model import LinearRegression

lin_reg= LinearRegression()
lin_reg.fit(housing_prepared, housing_labels)

some_data= housing.iloc[:5]
some_labels= housing_labels.iloc[:5]
some_data= housing.iloc[:5]
some_labels= housing_labels.iloc[:5]
some_data_prepared= full_pipeline.transform(some_data)
print("Predictions:", lin_reg.predict(some_data_prepared))
# Predictions:[ 210644.6045 317768.8069 210956.4333 59218.9888 189747.5584]
print("Labels:", list(some_labels))
# Labels:[210000.0, 340000.0, 300000.0, 110000.0, 230000.0]

from sklearn.metrics import mean_squared_error

housing_predictions= lin_reg.predict(housing_prepared)
lin_mse= mean_squared_error(housing_labels, housing_predictions)
lin_rmse= np.sqrt(lin_mse)
print(lin_rmse)

from sklearn.tree import DecisionTreeRegressor

tree_reg= DecisionTreeRegressor()
tree_reg.fit(housing_prepared, housing_labels)

housing_predictions= tree_reg.predict(housing_prepared)
tree_mse= mean_squared_error(housing_labels, housing_predictions)
tree_rmse= np.sqrt(tree_mse)
print(tree_rmse)

from sklearn.model_selection import cross_val_score
scores= cross_val_score(tree_reg, housing_prepared, housing_labels,
                        scoring="neg_mean_squared_error", cv=10)
tree_rmse_scores= np.sqrt(-scores)
print(tree_rmse_scores)

def display_scores(scores):
    print("Scores:", scores)
    print("Mean:", scores.mean())
    print("Standard deviation:", scores.std())

display_scores(tree_rmse_scores)

lin_scores= cross_val_score(lin_reg, housing_prepared, housing_labels,
                            scoring="neg_mean_squared_error", cv=10)
lin_rmse_scores= np.sqrt(-lin_scores)
display_scores(lin_rmse_scores)

from sklearn.ensemble import RandomForestRegressor
forest_reg= RandomForestRegressor()
forest_reg.fit(housing_prepared, housing_labels)
def display_scores(scores):
    print("Scores:", scores)
    print("Mean:", scores.mean())
    print("Standard deviation:", scores.std())
lin_scores= cross_val_score(lin_reg, housing_prepared, housing_labels,
                            scoring="neg_mean_squared_error", cv=10)
forest_rmse_scores= np.sqrt(-lin_scores)
display_scores(forest_rmse_scores)
print(forest_rmse_scores)

import joblib
joblib.dump(tree_reg, "my_model.pkl")
my_model_loaded= joblib.load("my_model.pkl")
print(my_model_loaded)

from sklearn.model_selection import GridSearchCV
param_grid= [
    {'n_estimators': [3, 10,
                      30], 'max_features': [2, 4, 6, 8]},
    {'bootstrap': [False], 'n_estimators': [3, 10], 'max_features': [2, 3,4]},
]
forest_reg= RandomForestRegressor()
grid_search= GridSearchCV(forest_reg, param_grid, cv=5,
                          scoring='neg_mean_squared_error',
                          return_train_score=True)
grid_search.fit(housing_prepared, housing_labels)

grid_search.best_estimator_
print(grid_search.best_estimator_)

cvres= grid_search.cv_results_
for mean_score, params in zip(cvres["mean_test_score"], cvres["params"]):
    print(np.sqrt(-mean_score), params)

final_model= grid_search.best_estimator_
X_test= strat_test_set.drop("median_house_value", axis=1)
y_test= strat_test_set["median_house_value"].copy()
X_test_prepared= full_pipeline.transform(X_test)
final_predictions= final_model.predict(X_test_prepared)
final_mse= mean_squared_error(y_test, final_predictions)
final_rmse= np.sqrt(final_mse)
print(final_rmse)

from scipy import stats
confidence = 0.95
squared_errors = (final_predictions - y_test) ** 2
import numpy as np
np.sqrt(stats.t.interval(confidence, len(squared_errors) - 1,
                        loc=squared_errors.mean(),
                        scale=stats.sem(squared_errors)))

from sklearn.model_selection import GridSearchCV
from sklearn.linear_model import LinearRegression

param_grid = [
    {'fit_intercept': [True, False]}
]

lin_reg = LinearRegression()
grid_search = GridSearchCV(lin_reg, param_grid, cv=5,
                           scoring='neg_mean_squared_error',
                           return_train_score=True)
grid_search.fit(housing_prepared, housing_labels)

grid_search.best_estimator_
print(grid_search.best_estimator_)

cvres= grid_search.cv_results_
for mean_score, params in zip(cvres["mean_test_score"], cvres["params"]):
    print(np.sqrt(-mean_score), params)

final_model= grid_search.best_estimator_
X_test= strat_test_set.drop("median_house_value", axis=1)
y_test= strat_test_set["median_house_value"].copy()
X_test_prepared= full_pipeline.transform(X_test)
final_predictions= final_model.predict(X_test_prepared)
final_mse= mean_squared_error(y_test, final_predictions)
final_rmse= np.sqrt(final_mse)
print(final_rmse)

from scipy import stats
confidence = 0.95
squared_errors = (final_predictions - y_test) ** 2
import numpy as np
np.sqrt(stats.t.interval(confidence, len(squared_errors) - 1,
                        loc=squared_errors.mean(),
                        scale=stats.sem(squared_errors)))

from sklearn.model_selection import GridSearchCV
from sklearn.tree import DecisionTreeRegressor

param_grid = {
    'max_depth': [None, 10, 20, 30],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

tree_reg = DecisionTreeRegressor()
grid_search = GridSearchCV(tree_reg, param_grid, cv=5,
                           scoring='neg_mean_squared_error',
                           return_train_score=True)
grid_search.fit(housing_prepared, housing_labels)

grid_search.best_estimator_
print(grid_search.best_estimator_)

cvres= grid_search.cv_results_
for mean_score, params in zip(cvres["mean_test_score"], cvres["params"]):
    print(np.sqrt(-mean_score), params)

final_model= grid_search.best_estimator_
X_test= strat_test_set.drop("median_house_value", axis=1)
y_test= strat_test_set["median_house_value"].copy()
X_test_prepared= full_pipeline.transform(X_test)
final_predictions= final_model.predict(X_test_prepared)
final_mse= mean_squared_error(y_test, final_predictions)
final_rmse= np.sqrt(final_mse)
print(final_rmse)

from scipy import stats
confidence = 0.95
squared_errors = (final_predictions - y_test) ** 2
import numpy as np
np.sqrt(stats.t.interval(confidence, len(squared_errors) - 1,
                        loc=squared_errors.mean(),
                        scale=stats.sem(squared_errors)))

"""Hay que hacer para cad alinea regresión y deciseon tree

"""